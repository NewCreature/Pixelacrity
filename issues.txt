Pixelacrity 0.2.2 Issues
------------------------

[ ]Fix oval tool missing pixels on slim ovals.

[ ]Implement brush in rectangle tool.

[ ]Make mouse wheel change zoom level.

[ ]Add controls for changing the position of a layer within the layer stack.

[ ]Allow scrolling the canvas by holding the mouse wheel button and moving the
   mouse.

[ ]Add shortcut keys for changing between tools.

[ ]Add a way to have filled shapes use the other color for outline.

[ ]Add optional crosshair to line up drawing.

[ ]Fix right-clicking a color not getting correct color on first click.

[ ]Add function to move a selection between layers.

[ ]Allow moving selections between layers.

[ ]Make switching layer float current selection.

[ ]Reverse order of layer list to make it more intuitive.

[ ]Selection should be unfloated any time we are performing an action that
   would cause a selection to be discarded.

[ ]Optimize flood fill.


Pixelacrity 0.3 Issues
----------------------

[ ]Implement frame editing.

   [ ]There should be handles on the corners of each frame so we can edit them
      by dragging the handles.

   [ ]There should be a special handle on the top edge to make a frame the
      current frame.

   [X]Need controls for adding and removing frames (menu items, etc.).

[ ]Crash when resizing on M1 Macbook Air.

   [ ]UNSUPPORTED (log once): setPrimitiveRestartEnabled:index: unsupported!

[ ]Investigate why pixel x-coordinate is offset by -1.

   [ ]This might be a bug with Apple high resolution displays. I wasn't able to
      replicate the issue on a normal 1080p monitor.

   [ ]The mouse coordinate seems to be correct as interacting with other
      elements of the UI work properly.

[ ]Consider allowing flood fill to be bound by the current frame if the user
   clicks within a frame.

   [ ]Use a modifier key to enable this mode. I'm thinking Ctrl+Click to make
      the flood fill tool restrict itself to filling inside the current frame.

[ ]Consider allowing flood fill to be bound by the visible part of the canvas.

   [ ]Use a modifier key to enable this mode. I'm thinking Ctrl+Click to make
      the flood fill tool restrict itself to filling inside the visible part of
      the canvas.

[ ]Optimize 'quixel_get_canvas_dimensions()'.

   [ ]We should be able to track the dimensions as changes are made to the
      canvas so we don't have to keep doing the pixel scanning algorithm.

[ ]Finish implementing color palette.

   [ ]Make colors configurable. The default palette should be able to be
      restored at any time. Custom color palettes should be able to be saved and
      reloaded.

[ ]Improve image export options.

   [ ]Export current frame to specified file.

      [X]We should default to exporting the whole image if no frame is
         selected.

      [ ]Consider saving the export path for each frame in the canvas settings
         file and adding a re-export option that overwrites the previously
         exported file.

      [ ]Investigate compositing methods for exporting multi-layered canvases.
         The current method will supposedly result in inaccurate colors where
         alpha is used, but I'm not sure that applies to non-filtered textures.


Closed Issues
-------------

[X]Investigate why pixels along the right and bottom edge of the canvas are
   disappearing.

[X]Finish implementing color selection.

   [X]Add color palette.

   [X]Add current colors element.

   [X]Finish color picker element implementation.

      [X]Investigate why t3gui_slider_proc() crashes with the default theme.

      [X]Add slider for setting color shade.

         [X]Add a color element for the slider and update the color based on the
            position of the slider.

      [X]Add slider for setting color alpha.

         [X]Add a color element for the slider and update the color based on the
            position of the slider.

      [X]Update position of slider based on the lightness value of the selected
         color. We might want to move the black and white color elements on the
         color picker to be adjacent to the other shades so the slider will
         correspond exactly with the shade selected.

      [X]Offer 9 shades of current base color in addition to black and white.

         [X]Separate the black and white color elements from the main color
            picker element.

            [X]Fix position of white.

[X]Modify save routine to utilize import/export code instead of saving entire
   tiles.

   [X]Update canvas_helpers module to handle different rendering scenarios. When
      saving the canvas, we need all of the data in the canvas to be saved.
      Exports should honor flags and other things that affect the final output.

      We can probably get away with adding an ignore_flags argument to the
      rendering functions. We can logically combine the canvas flags with the
      ignore_flags parameter and use the result as our flags. This would allow
      us to use the same function as our final export routine as well as saving
      the canvas data into our internal file format.

      Ultimately, we want the raw image data to make it into the saved data
      when saving our canvas. Then we import that information back into a new
      canvas instead of loading the canvas directly like we do now.

[X]Add ability to import image files.

   [X]Add UI for importing images (menu, file dialog, etc.).

   [X]Ensure pre-multiplied alpha setting is correct when importing images. Pre-
      multiplied alpha should always be disabled when loading images.

[X]Fix saving with PA_CANVAS_SAVE_MINIMAL causing alpha information to be
   lost. We need to implement a pixel shader so we can render the correct colors
   without using pre-multiplied alpha. This will also fix the incorrect
   rendering of alpha blended colors throughout the entire program.

   [X]For now, we render the bottom layer using the copy blending mode and
      others using the no pre-multiplied alpha standard blending mode. This
      fixes the issue of the alpha being lost when saving the canvas with
      PA_CANVAS_SAVE_MINIMAL, since we render each layer to a separate
      bitmap. This will not give the best results when exporting a full multi-
      layer canvas to an image file. We need to implement a compositing method
      so we can export the most accurate image data.

[X]Allow saving directly back into loaded image if no data will be lost.

[X]Clear scratch bitmap when starting a selection.

[X]Selection tool erases pixels adjacent to the selection box. Check coordinates
   to ensure we only erase what's within the selection area.

[X]Add controls for resizing selection.

   [X]Finish box implementation. We need to fix the position of the mid-box
      handles so they can be positioned in the middle of the pixel when the box
      with or height is an even number.

      The logic flow should be to update the handle positions each frame that
      the selection is active. When a handle is being moved, we should update
      all of the handle positions during the handle move logic as well.

      Handles will probably need some extra data to keep track of where they
      were clicked, whether they are currently being moved, and where they
      currently are. We should snap the handles to the pixel grid and require
      that the handle be moved past the halfway point of the pixel before
      snapping into the next pixel location.

[X]Allow floating selection to be moved.

   [X]Contents of selection are erased when releasing the mouse button after
      move.

   [X]Selection box drifts when moving handles back and forth accross each
      other.

   [X]Can't select handle when hovering over selection.

   [X]Selection should not stop floating until user action. When moving a
      selection around, we don't want to pick up background elements when we are
      trying to get the position of our floating selection correct.

   [X]Resizing a selection should unfloat and refloat the selection.

   [X]It might be worth consolidating the initial selection and resize code. We
      can make the selection a 1x1 box initially and select the upper-left
      handle. Running the selection resize logic from there should give us the
      same results as creating the box separately.

[X]Line tool places start and end pixels too far to the left.

[X]Pixel tool draws to incorrect location.

[X]Pixel tool doesn't draw to canvas when the user releases the mouse button.

   [X]Finish implementing drawing scratch back to canvas on mouse button
      release.

[X]Pixel tool doesn't draw the canvas correctly while the user is drawing
   pixels.

[X]Make pixel tool work like the other tools by rendering to a scratch bitmap
   before ultimately rendering to the canvas when the user releases the mouse
   button. This is primarily to optimize undo state sizes by only saving the
   area that was edited. For large drawings, the old method would have to save
   huge amounts of data each time the pixel tool was used.

[X]Drawing tools seemingly randomly use incorrect color.

   [ ]This happens because we are using t3f_mouse_button[] to detect which
      button was pressed. We need to add a way to differentiate buttons into
      T3GUI.

[X]Finish undo implementation.

   [X]Move undo system into its own module since we will need a lot of functions
      for the various types of undo states.

   [X]Implement named undo states.

   [X]Implement applying undo states.

   [X]Implement saving and applying redo states.

   [X]Rework undo/redo naming to make it more flexible. We should save the name
      of the action only and build the final menu item name from that data.

   [X]Add support for multiple types of undo states.

[X]Implement backup system. We should save a timestamped backup every 10 minutes
   so testers don't lose a lot of work to crashes.

[X]Ask to save changes when closing a canvas.

[X]Finish flood fill implementation.

   [X]Make undoable.

      [X]Get dimensions of canvas to reduce the search area. We can save this
         area as an undo state, then flood fill the temp bitmap, and finally
         overwrite the canvas data if the fill was successful.

   [X]See if we can use a linked list instead of a queue to remove the hard
      limit on how much a flood fill can handle filling.

   [X]Fix flood fill failure possibly messing up a drawing if the user attempts
      to flood fill and some pixels are the same as the target color.

      [X]If flood fill fails, we should just return 'false' and restore the
         original data from the undo state we created before performing the
         operation.

   [X]Make flood fill work across multiple bitmaps.

[X]Finish layer interface implementation.

   [X]Decouple adding layers from 'quixel_expand_canvas()'.

   [X]The user should be able to add/remove layers as needed.
      'canvas->layer_max' should be changed based on user action. We need the
      interface to be clear and consistent in how it shows layer information to
      the user. The current method of having the user select layers that don't
      exist yet is unintuitive.

   [X]Add UI elements for adding/removing layers.

   [X]Add 'Layer' menu for accessing layer related functionality.

   [X]Always highlight the currently selected layer in the layer list.

   [X]Layer list should not take over keyboard input.

[X]See about updating pixel shader to produce more accurate color blending.

   [X]Color should blend toward the color of the pixel being drawn by alpha.

[X]Don't destroy UI and recreate it on resize.

[X]Make scroll speed independent of zoom level.

[X]Fix color picker not visible.

[X]Right-clicking while drawing with left mouse button cancels out drawing
   operation. We should ignore MSG_MOUSEDOWN when other button is already held.

[X]Implement unfloat selection redo.

[X]Implement float selection redo.

[X]Pixel tool sometimes loses some pixels at edge.

[X]Scratch bitmap is not large enough to cover entire screen when using pixel
   tool. We should either make it larger, or just position it differently.

   [X]I think the tool should be reimplemented using a linked list of points.
      We can just redraw all the lines each frame, just like the other tools.

[X]Store layer in undo state, even if the layer has no bitmap data. We still
   need to know which layer the undo state applies to.

[X]Adding and removing layers should mark the canvas as modified.

[X]Handle canvas expansion for unfloat selection.

[X]Fix drawing primitives not rendering to all affected canvas bitmaps.

   [X]Drawing a rectangle that should render to 4 canvas bitmaps only actually
      renders to the two where the start and end points reside.

[X]Adjust the canvas editor view position to keep its center in the center of
   the display when resizing.

[X]Crash when loading canvas.

[X]Crash when loading image as canvas.

[X]Use separate bitmap for floating selection. The scratch bitmap may not be big
   enough.

[X]Finish infinite canvas implementation.

   [X]Handle canvas bitmap array expansion in canvas editor module. We need to
      be able to adjust the editor variables when shifts occur.

      [X]Handle expanding to the right and down.

   [X]Fix canvas shift making drawing disappear.

   [X]Make undo/redo work when an action causes the canvas bitmap array to be
      shifted.

   [X]Make selection undo/redo work even if changes happen that cause the canvas
      to be shifted.

[X]Undo counter desyncs when applying an unfloat selection undo. Duplicate by
   drawing some pixels, selecting them, floating them, unfloating them, then
   undoing the unfloat.

   [X]Was actually the modified counter that was not being updated. Fixed.

[X]Undoing float selection can cause pixels at the bottom edge to disappear.

[X]Crash when attempting to flood fill brand new blank canvas.

[X]Moving away from selection tool causes translucent pixels in the layer to
   have their alpha combined. I think this is being caused by the incorrect
   blend mode being set when copying the scratch data back to the canvas.

   [X]It only happens when a floating selection is unfloated.

   [X]Unfloating uses composite rendering mode. Need to see if copy rendering
      will work or if we need to make a new mode.

   [X]Looks like we'll need to implement a new rendering mode that only copies
      pixels with alpha > 0. This will have to be manually done by copying the
      individual pixels to the destination bitmaps.

      [X]Modify how floating selection rendering works. We should render the
         visible part of the current layer to the scratch bitmap and copy the combined bitmap from the selection data onto it and render the scratch
         bitmap to the screen. This is the same way the other tools work.

[X]Moving selection is rendered above layers. We should render it in its
   position in the layer stack.

[X]Only allow selection to remain as long as the selection tool is active.

[X]Flood fill failed to completely fill vertical line of pixels.

   [X]Flood fill leaves traces when it fails to complete. Maybe we should just
      add another list that keeps track of changed pixels so we can revert more
      easily.

[X]Add erase tool.

[X]Implement image import. The image will be imported into a floating selection
   at the center of the view so the user has control over the final placement.

[X]Implement clipboard.

[X]Highlight currently selected tool.

[X]Crash when deleting layer.

[X]Resizing window causes freeze on Windows.

[X]Flood fill button doesn't indicate it's selected.

[X]Status bar is not at the bottom of the window on Windows. I think it might be
   something to do with the window being implicitly resized when adding a menu.

   [X]This gets corrected after a resize operation. Maybe something to do with
      T3F trying to restore the window size from the previous session.

[X]Add keyboard shortcuts for undo/redo.

[X]Figure out why moving where we set the pre-multiplied alpha shader before
   rendering the UI to the main UI rendering code causes the color GUI elements
   to render incorrectly.

[X]Look into why line fragments used by the pixel tool don't render identically
   to the scratch bitmap and canvas.

[X]Implement brush in oval tool.

[X]Investigate artifacting when releasing mouse button to commit drawing to
   canvas on Linux. Some areas around primitives being drawn to canvas can
   disappear.

[X]Fix save changes prompt showing up when attempting to import an image.
